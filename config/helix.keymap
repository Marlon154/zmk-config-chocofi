/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

 #include <behaviors.dtsi>
 #include <dt-bindings/zmk/keys.h>
 #include <dt-bindings/zmk/bt.h>
 #include <dt-bindings/zmk/outputs.h>

 #define DEFAULT 0
 #define LOWER  1
 #define RAISE  2
 #define ADJ 3

/ {
       keymap {
              compatible = "zmk,keymap";
              default_layer {
                     bindings = <
       &mt LGUI RBKT    &kp Q   &kp W   &kp E   &kp R          &kp T                                             &kp Y           &kp U           &kp I          &kp O    &kp P     &mt RGUI LBKT
       &mt LCTRL GRAVE  &kp A   &kp S   &kp D   &kp F          &kp G                                             &kp H           &kp J           &kp K          &kp L    &kp SEMI  &mt RCTRL SQT
       &mt LALT BSLH    &kp Z   &kp X   &kp C   &kp V          &kp B                                             &kp N           &kp M           &kp COMMA      &kp DOT  &kp FSLH  &mt RALT MINUS
       &trans           &trans  &trans  &trans  &lt RAISE TAB  &mt LSHFT SPACE  &lt LOWER RET     &lt LOWER ESC  &mt LSHFT BSPC  &lt RAISE DEL   &trans         &trans   &trans    &trans
       &trans           &trans  &trans  &trans  &trans         &trans           &trans            &trans         &trans          &trans          &trans         &trans   &trans    &trans
                     >;
              };
              lower_layer {
                     bindings = <
       &mt LGUI F1     &kp F2    &kp F3  &kp F4    &kp F5       &kp F6                                &kp F7          &kp F8          &kp F9           &kp F10   &kp F11   &mt RGUI F12
       &mt LCTRL PLUS  &kp EXCL  &kp AT  &kp HASH  &kp DLLR     &kp PRCNT                             &kp CARET       &kp AMPS        &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp UNDER
       &mt LALT EQUAL  &kp N1    &kp N2  &kp N3    &kp N4       &kp N5                                &kp N6          &kp N7          &kp N8           &kp N9    &kp N0    &mt RALT MINUS
       &trans          &trans    &trans  &trans    &lt ADJ TAB  &mt LSHFT SPACE  &kp RET   &kp ESC    &mt LSHFT BSPC  &lt ADJ DEL     &trans           &trans    &trans    &trans
       &trans          &trans    &trans  &trans    &trans       &trans           &trans    &trans     &trans          &trans          &trans           &trans    &trans    &trans
                     >;
              };
              raise_layer {
                     bindings = <
       &mt LGUI KP_NUM    &kp KP_DIVIDE    &kp KP_N7  &kp KP_N8  &kp KP_N9  &mo ADJ                                        &kp C_BRI_UP    &kp HOME  &kp C_PP   &kp PG_UP  &kp C_VOL_UP  &mt RGUI CAPS
       &mt LCTRL KP_PLUS  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_MINUS                                   &kp LEFT        &kp DOWN  &kp UP     &kp RIGHT  &kp C_VOL_DN  &mt RCTRL K_APP
       &mt LALT KP_EQUAL  &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT                                     &kp C_BRI_DN    &kp END   &kp PSCRN  &kp PG_DN  &kp K_MUTE    &kp RALT
       &trans             &trans           &trans     &trans     &kp TAB    &mt LSHFT SPACE  &lt ADJ RET     &lt ADJ ESC   &mt LSHFT BSPC  &kp DEL   &trans     &trans     &trans        &trans
       &trans             &trans           &trans     &trans     &trans     &trans           &trans          &trans        &trans          &trans    &trans     &trans     &trans        &trans
                     >;
              };
              fn_layer {
                     bindings = <
       &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3 &bt BT_SEL 4                       &trans       &trans  &trans  &trans  &trans  &trans
       &bt BT_NXT  &out OUT_TOG  &out OUT_BLE  &out OUT_USB  &reset       &bootloader                        &bootloader  &reset  &trans  &trans  &trans  &trans
       &bt BT_PRV  &trans        &trans        &trans        &trans       &trans                             &trans       &trans  &trans  &trans  &trans  &trans
       &trans      &trans        &trans        &trans        &trans       &trans        &trans       &trans  &trans       &trans  &trans  &trans  &trans  &trans
       &trans      &trans        &trans        &trans        &trans       &trans        &trans       &trans  &trans       &trans  &trans  &trans  &trans  &trans
                     >;
              };
       };
};
